@page "/auth/register"

@using Microsoft.JSInterop
@using MudBlazor
@inject PicoPlus.Services.CRM.Objects.Contact ContactService
@inject IJSRuntime JSRuntime
@inject PicoPlus.Services.Identity.Zibal ZibalService
@inject PicoPlus.Services.SMS.SMS.Send SMSService
@using System.Globalization;
@using System.Reflection;
@using Newtonsoft.Json
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IDialogService Dialog;

<MudContainer Class="mt-5">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">فرم ثبت نام</MudText>

        <MudTextField @bind-Value="ContactModel.properties.natcode" Label="کد ملی" Variant="Variant.Filled" Margin="Margin.Normal" />

        <MudDatePicker Label="Persian" @bind-Date="_date" Culture="GetPersianCulture()" TitleDateFormat="dddd, dd MMMM" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@CVInquiry">استعلام</MudButton>

        <MudGrid Container="true" Class="mt-4">
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="ContactModel.properties.firstname" Label="نام" Variant="Variant.Filled" Margin="Margin.Normal" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="ContactModel.properties.lastname" Label="نام خانوادگی" Variant="Variant.Filled" Margin="Margin.Normal" />
                <MudAlert></MudAlert>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="ContactModel.properties.phone" Label="شماره موبایل" Variant="Variant.Outlined" Margin="Margin.Normal" />
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@CreateOrUpdateContact">ارسال</MudButton>
            </MudItem>
        </MudGrid>

        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" />
        }

    </MudPaper>
</MudContainer>

@code {
    private string nationalCode;
    private DateTime? birthDate;
    private string firstName;
    private string lastName;
    private string mobileNumber;

    public string IsVerified { get; set; }

    private DateTime? _date = new DateTime(2021, 02, 14); // 1399-11-26 in Persian calendar
    private bool isLoading = false;

    public PicoPlus.Models.CRM.Objects.Contact.Search.Response.Result ContactModel { get; set; } = new()
        {
            properties = new PicoPlus.Models.CRM.Objects.Contact.Search.Response.Result.Properties()
        };

    public CultureInfo GetPersianCulture()
    {
        var culture = new CultureInfo("fa-IR");
        DateTimeFormatInfo formatInfo = culture.DateTimeFormat;
        formatInfo.AbbreviatedDayNames = new[] { "ی", "د", "س", "چ", "پ", "ج", "ش" };
        formatInfo.DayNames = new[] { "یکشنبه", "دوشنبه", "سه شنبه", "چهار شنبه", "پنجشنبه", "جمعه", "شنبه" };
        var monthNames = new[]
        {
            "فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن",
            "اسفند", ""
        };
        formatInfo.AbbreviatedMonthNames = formatInfo.MonthNames = formatInfo.MonthGenitiveNames = formatInfo.AbbreviatedMonthGenitiveNames = monthNames;
        formatInfo.AMDesignator = "ق.ظ";
        formatInfo.PMDesignator = "ب.ظ";
        formatInfo.ShortDatePattern = "yyyy/MM/dd";
        formatInfo.LongDatePattern = "dddd, dd MMMM, yyyy";
        formatInfo.FirstDayOfWeek = DayOfWeek.Saturday;
        Calendar cal = new PersianCalendar();
        FieldInfo fieldInfo = culture.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (fieldInfo != null)
            fieldInfo.SetValue(culture, cal);
        FieldInfo info = formatInfo.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (info != null)
            info.SetValue(formatInfo, cal);
        culture.NumberFormat.NumberDecimalSeparator = "/";
        culture.NumberFormat.DigitSubstitution = DigitShapes.NativeNational;
        culture.NumberFormat.NumberNegativePattern = 0;
        return culture;
    }

    private async Task CreateOrUpdateContact()
    {
        isLoading = true;
        try
        {
            var persianDate = ConvertToPersianDate(_date.Value);

            var contact = await ContactService.Create(new PicoPlus.Models.CRM.Objects.Contact.Create.Request
                {
                    properties = new PicoPlus.Models.CRM.Objects.Contact.Create.Request.Properties
                    {
                        email = $"{ContactModel.properties.natcode}@picoplus.app",
                        natcode = ContactModel.properties.natcode,
                        firstname = ContactModel.properties.firstname,
                        lastname = ContactModel.properties.lastname,
                        dateofbirth = persianDate,
                        father_name = ContactModel.properties.father_name,
                        phone = ContactModel.properties.phone
                    }
                });

            if (!string.IsNullOrEmpty(contact.id))
            {
                string JsonModel = JsonConvert.SerializeObject(ContactModel);

                await sessionStorage.SetItemAsync("LogInState", 1);
                await sessionStorage.SetItemAsync("ContactModel", ContactModel);

                await SendWelcomeSMS(contact.properties.phone, contact.id, contact.properties.firstname, contact.properties.lastname);
                Navigation.NavigateTo("/user/panel");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("ShowToast", "مرکز پیام", "خطا در ایجاد مخاطب", "error");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("ShowToast", "مرکز پیام", $"خطا در ایجاد مخاطب: {ex.Message}", "error");
            Console.WriteLine("Error Creating Contact: " + ex.StackTrace);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CVInquiry()
    {
        var info = new Models.Services.Identity.Zibal.NationalIdentityInquiry.Response();
       
        isLoading = true;
        try
        {
            DateTime _date1 = _date.Value;
            string persianDate = ConvertToPersianDate(_date1);

            info = await ZibalService.NationalIdentityInquiry(new PicoPlus.Models.Services.Identity.Zibal.NationalIdentityInquiry.Request
                {
                    birthDate = persianDate,
                    nationalCode = ContactModel.properties.natcode,
                });

            ContactModel.properties.firstname = info.data.firstName;
            ContactModel.properties.lastname = info.data.lastName;
        }
        catch (Exception ex)
        {
            await ShowMessageBox("خطا در استعلام ثبت احوال", $"خطا در استعلام: {info.message}");
            await ShowMessageBox("خطا در استعلام ثبت احوال", $"خطا در استعلام: {ex.InnerException.Message}");

        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SendWelcomeSMS(string phone, string cid, string firstname, string lastname)
    {
        isLoading = true;
        try
        {
            await SMSService.SendWelcomeNew(new PicoPlus.Models.Services.SMS.SMS.WelcomeNew
                {
                    toNum = phone,
                    inputData = new List<PicoPlus.Models.Services.SMS.SMS.WelcomeNewInputdata>
                {
                    new PicoPlus.Models.Services.SMS.SMS.WelcomeNewInputdata
                    {
                        cid = cid,
                        firstname = firstname,
                        lastname = lastname
                    }
                }
                });

        }
        catch (Exception ex)
        {
        }
        finally
        {
            isLoading = false;
        }
    }

    private static string ConvertToPersianDate(DateTime gregorianDate)
    {
        PersianCalendar persianCalendar = new PersianCalendar();
        int year = persianCalendar.GetYear(gregorianDate);
        int month = persianCalendar.GetMonth(gregorianDate);
        int day = persianCalendar.GetDayOfMonth(gregorianDate);
        return $"{year}/{month:D2}/{day:D2}";
    }
    private async Task ShowMessageBox(string title, string message)
    {
        bool? result = await Dialog.ShowMessageBox(title, message, yesText: "OK");
        StateHasChanged();
    }
}
