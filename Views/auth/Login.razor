@page "/auth/login"

@using MudBlazor
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using Newtonsoft.Json

@inject NavigationManager Navigation
@inject IDialogService Dialog;
@inject PicoPlus.Services.CRM.Objects.Contact ContactService;

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-5">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Login</MudText>
        <MudTextField @bind-Value="UserID" Label="UserID" Variant="Variant.Filled" Margin="Margin.Normal" FullWidth="true" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@DoLogIn">Login</MudButton>
    </MudPaper>
</MudContainer>

@code {
    public string UserID { get; set; }

    public PicoPlus.Models.CRM.Objects.Contact.Search.Response.Result ContactModel { get; set; } = new()
        {
            properties = new PicoPlus.Models.CRM.Objects.Contact.Search.Response.Result.Properties()
        };

    public PicoPlus.Models.CRM.Objects.Contact.Search.Response ContactSearchResponseModel { get; set; } = new();



    private async Task DoLogIn()
    {

        if (await DoLogInWithNatCode())
        {

            
            await sessionStorage.SetItemAsync("ContactModel", ContactModel);
            Console.WriteLine("11");
            await sessionStorage.SetItemAsync("LogInState", 1);
            Navigation.NavigateTo("/user/panel");

        }
        else
        {
            if (await DoLogInWithID())
            {
                string JsonModel = JsonConvert.SerializeObject(ContactModel);
                await sessionStorage.SetItemAsync("ContactModel", JsonModel);
                await sessionStorage.SetItemAsync("LogInState", 1);
                Navigation.NavigateTo("/user/panel");


            }
            else
            {

            }
            Navigation.NavigateTo("/auth/register");


        }



    }

    private async Task<bool> DoLogInWithNatCode()

    {
        try

        {
            string[] Properties = PicoPlus.Services.Helpers.ConvertModelToStringArray(ContactModel.properties);

            var contact = await ContactService.Search("", "natcode", UserID, Properties);

            if (contact.total != 0)
            {
                ContactModel =  contact.results.FirstOrDefault();

                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {

            await ShowMessageBox("Error", ex.Message);
            return false;
        }
    }

    private async Task<bool> DoLogInWithID()
    {
        try

        {
        
            var ContactSearchModel = await ContactService.Read(UserID);

            if (ContactModel != null)
            {
                return true;
             
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            await ShowMessageBox("Error", ex.Message);
            return false;
        }

    }


    private async Task ShowMessageBox(string title, string message)
    {
        bool? result = await Dialog.ShowMessageBox(title, message, yesText: "OK");
        StateHasChanged();
    }
}
